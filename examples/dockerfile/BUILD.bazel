load("@aspect_bazel_lib//lib:run_binary.bzl", "run_binary")
load("@configure_buildx//:defs.bzl", "BUILDER_NAME", "TARGET_COMPATIBLE_WITH")
load("@rules_oci//oci:defs.bzl", "oci_image")
load("//examples:assert.bzl", "assert_oci_config", "assert_oci_image_command")

# docker buildx create --name container --driver=docker-container
run_binary(
    name = "base",
    srcs = ["Dockerfile"] + glob(["src/*"]),
    args = [
        "build",
        "./examples/dockerfile",
        "--builder",
        BUILDER_NAME,
        "--output=type=oci,tar=false,dest=$@",
    ],
    execution_requirements = {"local": "1"},
    mnemonic = "BuildDocker",
    out_dirs = ["base"],
    target_compatible_with = TARGET_COMPATIBLE_WITH,
    tool = "@multitool//tools/buildx",
)

oci_image(
    name = "image",
    base = ":base",
)

assert_oci_config(
    name = "assert_metadata",
    cmd_eq = ["/app/say.py"],
    entrypoint_eq = None,
    image = ":image",
)

assert_oci_image_command(
    name = "assert_jq_works",
    args = [
        "jq",
        "--version",
    ],
    exit_code_eq = 0,
    image = ":image",
    output_eq = "jq-1.6\n",
)

assert_oci_image_command(
    name = "assert_apt_lists_still_exist",
    args = [
        "file",
        "/var/lib/apt/lists",
    ],
    exit_code_eq = 0,
    image = ":image",
    output_eq = "/var/lib/apt/lists: directory\n",
)

assert_oci_image_command(
    name = "assert_cow_says_moo",
    args = [
        "python",
        "/app/say.py",
    ],
    exit_code_eq = 0,
    image = ":image",
    output_eq = """\
  ____
| moo! |
  ====
    \\
     \\
       ^__^
       (oo)\\_______
       (__)\\       )\\/\\
           ||----w |
           ||     ||
""",
)
